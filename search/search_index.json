{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Ilias Buddy Desktop \u00b6 A private Ilias RSS feed client written in Electron. Warning Currently in development, not all features are working! Features \u00b6 Runs silent and not process intensive from login in the background It checks based on a cron job as often as you want the private RSS feed for new entries When a new entry is found a notification will be emitted Upcoming: Save entries with a comment forever Upcoming: Save links based on your courses for faster access in a list Install \u00b6 Either build it yourself from source or install it via the GitHub release page Source Code Documentation \u00b6 Find the source code documentation here","title":"Home"},{"location":"#welcome-to-ilias-buddy-desktop","text":"A private Ilias RSS feed client written in Electron. Warning Currently in development, not all features are working!","title":"Welcome to Ilias Buddy Desktop"},{"location":"#features","text":"Runs silent and not process intensive from login in the background It checks based on a cron job as often as you want the private RSS feed for new entries When a new entry is found a notification will be emitted Upcoming: Save entries with a comment forever Upcoming: Save links based on your courses for faster access in a list","title":"Features"},{"location":"#install","text":"Either build it yourself from source or install it via the GitHub release page","title":"Install"},{"location":"#source-code-documentation","text":"Find the source code documentation here","title":"Source Code Documentation"},{"location":"about/","text":"About \u00b6 Authors \u00b6 AnonymerNiklasistanonym: GitHub Dependencies \u00b6 Info You can always find the latest info in the package.json file Runtime dependencies \u00b6 auto-launch : 5.0.5 Launch node applications at login compare-versions : 3.4.0 Compare version numbers to find out if a newer version was released cronstrue : 1.58.0 Convert cron expressions into human readable descriptions electron-log : 2.2.17 A simple and easy logging module for electron applications handlebars : 4.0.12 Build and render HTML templates fast and easy moment : 2.23.0 Parse, validate, manipulate, and display dates node-cron : 2.0.3 A simple cron-like task scheduler for Node.js node-notifier : 5.3.0 A Node.js module for sending native notifications xml-js : 1.6.8 A convertor between XML and JSON Developer dependencies \u00b6 electron : 4.0.1 The electron framework electron-builder : 20.38.4 Export electron apps to different OSes standard : 12.0.1 JavaScript code style linter and fixer for more readable code tslint : 5.12.0 JavaScript/TypeScript code style linter with static analysis typedoc : 0.14.0 Document source code with highlight on the static type system typescript : 3.2.2 The typescript runtime (needed for typedoc, tslint, ...)","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#authors","text":"AnonymerNiklasistanonym: GitHub","title":"Authors"},{"location":"about/#dependencies","text":"Info You can always find the latest info in the package.json file","title":"Dependencies"},{"location":"about/#runtime-dependencies","text":"auto-launch : 5.0.5 Launch node applications at login compare-versions : 3.4.0 Compare version numbers to find out if a newer version was released cronstrue : 1.58.0 Convert cron expressions into human readable descriptions electron-log : 2.2.17 A simple and easy logging module for electron applications handlebars : 4.0.12 Build and render HTML templates fast and easy moment : 2.23.0 Parse, validate, manipulate, and display dates node-cron : 2.0.3 A simple cron-like task scheduler for Node.js node-notifier : 5.3.0 A Node.js module for sending native notifications xml-js : 1.6.8 A convertor between XML and JSON","title":"Runtime dependencies"},{"location":"about/#developer-dependencies","text":"electron : 4.0.1 The electron framework electron-builder : 20.38.4 Export electron apps to different OSes standard : 12.0.1 JavaScript code style linter and fixer for more readable code tslint : 5.12.0 JavaScript/TypeScript code style linter with static analysis typedoc : 0.14.0 Document source code with highlight on the static type system typescript : 3.2.2 The typescript runtime (needed for typedoc, tslint, ...)","title":"Developer dependencies"},{"location":"build-app/","text":"Build App \u00b6 Setup \u00b6 First you need to install all the node modules/dependencies: npm install Setup > Advanced \u00b6 With executing sh setup.sh an extensive setup will be run that builds icons, downloads fonts, etc. from source. This is not necessary because all these files are already in the repository. Windows \u00b6 Build executable files of this program for Windows: Windows > Build \u00b6 cd scripts ./win_build.sh The created files can be found in the directory dist . Windows > Install \u00b6 Either run: cd scripts ./win_install.sh Or got to the directory dist and double click the created *.exe file to open the installer.","title":"App"},{"location":"build-app/#build-app","text":"","title":"Build App"},{"location":"build-app/#setup","text":"First you need to install all the node modules/dependencies: npm install","title":"Setup"},{"location":"build-app/#setup-advanced","text":"With executing sh setup.sh an extensive setup will be run that builds icons, downloads fonts, etc. from source. This is not necessary because all these files are already in the repository.","title":"Setup &gt; Advanced"},{"location":"build-app/#windows","text":"Build executable files of this program for Windows:","title":"Windows"},{"location":"build-app/#windows-build","text":"cd scripts ./win_build.sh The created files can be found in the directory dist .","title":"Windows &gt; Build"},{"location":"build-app/#windows-install","text":"Either run: cd scripts ./win_install.sh Or got to the directory dist and double click the created *.exe file to open the installer.","title":"Windows &gt; Install"},{"location":"build-docs/","text":"Build Docs \u00b6 Setup \u00b6 Run the following commands to make your system fit for the upcoming tasks Mkdocs \u00b6 Python virtual environment You probably want to set this up in an virtual environment: Check here for further instructions Install all the needed packages in one go: pip install -r requirements.txt Install the needed packages step by step: # Install mkdocs pip install mkdocs -U # Install the mkdocs material theme pip install mkdocs-material -U # Use the markdown extension codehilite for code syntax highlighting pip install pygments -U # Use the markdown extension pymdown for many thinks, like task lists pip install pymdown-extensions -U TypeDoc \u00b6 # Install typedoc npm install -g typedoc Build \u00b6 # First go into the docs directory cd docs # Then build the mkdocs hierarchy cd mkdocs mkdocs build cd .. # Then build with typedoc the source code documentation typedoc --tsconfig ../tsconfig.json # Then copy this documentation into the mkdocs hierarchy cp -r typedoc mkdocs/site/typedoc Now the directory docs/mkdocs/site contains the whole documentation.","title":"Documentation"},{"location":"build-docs/#build-docs","text":"","title":"Build Docs"},{"location":"build-docs/#setup","text":"Run the following commands to make your system fit for the upcoming tasks","title":"Setup"},{"location":"build-docs/#mkdocs","text":"Python virtual environment You probably want to set this up in an virtual environment: Check here for further instructions Install all the needed packages in one go: pip install -r requirements.txt Install the needed packages step by step: # Install mkdocs pip install mkdocs -U # Install the mkdocs material theme pip install mkdocs-material -U # Use the markdown extension codehilite for code syntax highlighting pip install pygments -U # Use the markdown extension pymdown for many thinks, like task lists pip install pymdown-extensions -U","title":"Mkdocs"},{"location":"build-docs/#typedoc","text":"# Install typedoc npm install -g typedoc","title":"TypeDoc"},{"location":"build-docs/#build","text":"# First go into the docs directory cd docs # Then build the mkdocs hierarchy cd mkdocs mkdocs build cd .. # Then build with typedoc the source code documentation typedoc --tsconfig ../tsconfig.json # Then copy this documentation into the mkdocs hierarchy cp -r typedoc mkdocs/site/typedoc Now the directory docs/mkdocs/site contains the whole documentation.","title":"Build"},{"location":"contribute/","text":"Contribute \u00b6 If you want to help and contribute to this project here are some things for you to find what is currently wanted: Check any issues on the GitHub page \u00b6 If you want a feature just make an issue or pull request for this. Issues Pull-Requests Check comment tags \u00b6 There will be at least two main tags in the code comments: TODO : With a following explanation what there is to do FIXME : Means that this should be fixed and is currently an error/bad solution (has an higher priority than the TODO tag) To find them you can either search for them or use an extension like Todo Tree which automatically highlights the tags for you. To further customize it you can even configure it in the vscode settings.json file: ... \"todo-tree.customHighlight\" : { \"TODO\" : { \"background\" : \"blue\" , \"type\" : \"text\" }, \"FIXME\" : { \"background\" : \"red\" , \"type\" : \"line\" } } , \"todo-tree.expanded\" : true , \"todo-tree.flat\" : true , \"todo-tree.grouped\" : true , \"todo-tree.tags\" : [ \"TODO\" , \"FIXME\" ] , ... Test code before contribution (or to help) \u00b6 To test you code style or check for obvious errors you can just run npm run test Through this some errors are automatically fixed and the ones that exist will be displayed. This will also run the test suite in tests ( tests/test.js ) and check if any tests are written if there are any errors.","title":"Contribute"},{"location":"contribute/#contribute","text":"If you want to help and contribute to this project here are some things for you to find what is currently wanted:","title":"Contribute"},{"location":"contribute/#check-any-issues-on-the-github-page","text":"If you want a feature just make an issue or pull request for this. Issues Pull-Requests","title":"Check any issues on the GitHub page"},{"location":"contribute/#check-comment-tags","text":"There will be at least two main tags in the code comments: TODO : With a following explanation what there is to do FIXME : Means that this should be fixed and is currently an error/bad solution (has an higher priority than the TODO tag) To find them you can either search for them or use an extension like Todo Tree which automatically highlights the tags for you. To further customize it you can even configure it in the vscode settings.json file: ... \"todo-tree.customHighlight\" : { \"TODO\" : { \"background\" : \"blue\" , \"type\" : \"text\" }, \"FIXME\" : { \"background\" : \"red\" , \"type\" : \"line\" } } , \"todo-tree.expanded\" : true , \"todo-tree.flat\" : true , \"todo-tree.grouped\" : true , \"todo-tree.tags\" : [ \"TODO\" , \"FIXME\" ] , ...","title":"Check comment tags"},{"location":"contribute/#test-code-before-contribution-or-to-help","text":"To test you code style or check for obvious errors you can just run npm run test Through this some errors are automatically fixed and the ones that exist will be displayed. This will also run the test suite in tests ( tests/test.js ) and check if any tests are written if there are any errors.","title":"Test code before contribution (or to help)"},{"location":"debug-breakpoints/","text":"Breakpoints \u00b6 Use a special IDE for JS debugging To easily debug the code you can use an IDE like Visual Studio Code (Insiders) . Visual Studio \u00b6 Select at the left side the Debug Icon (Ctrl + Shift + D) At the top of the window at the side should now be an entry called Debug IliasBuddy Desktop Select this and click run (Click F5) You can now also set breakpoints like in any other debugger and debug code without 1000 console.log commands","title":"Breakpoints"},{"location":"debug-breakpoints/#breakpoints","text":"Use a special IDE for JS debugging To easily debug the code you can use an IDE like Visual Studio Code (Insiders) .","title":"Breakpoints"},{"location":"debug-breakpoints/#visual-studio","text":"Select at the left side the Debug Icon (Ctrl + Shift + D) At the top of the window at the side should now be an entry called Debug IliasBuddy Desktop Select this and click run (Click F5) You can now also set breakpoints like in any other debugger and debug code without 1000 console.log commands","title":"Visual Studio"},{"location":"debug-logs/","text":"Logs \u00b6 Use a special log file reader To easily read logs a log file reader like glogg is heavily recommended. electron-log \u00b6 The used library in this project is electron-log . By default electron-log writes logs to the following locations: Platform Path Linux ~/.config/ilias-buddy-desktop/log.log OS X ~/Library/Logs/ilias-buddy-desktop/log.log Windows %USERPROFILE%/AppData/Roaming/ilias-buddy-desktop/log.log or %AppData%/ilias-buddy-desktop/log.log You can then search this file for peculiarities.","title":"Logs"},{"location":"debug-logs/#logs","text":"Use a special log file reader To easily read logs a log file reader like glogg is heavily recommended.","title":"Logs"},{"location":"debug-logs/#electron-log","text":"The used library in this project is electron-log . By default electron-log writes logs to the following locations: Platform Path Linux ~/.config/ilias-buddy-desktop/log.log OS X ~/Library/Logs/ilias-buddy-desktop/log.log Windows %USERPROFILE%/AppData/Roaming/ilias-buddy-desktop/log.log or %AppData%/ilias-buddy-desktop/log.log You can then search this file for peculiarities.","title":"electron-log"},{"location":"faq/","text":"FAQ \u00b6 Todo Add later when questions are coming in","title":"FAQ"},{"location":"faq/#faq","text":"Todo Add later when questions are coming in","title":"FAQ"},{"location":"instructions/","text":"Instructions \u00b6 TODO Memo Add later Main screens \u00b6 Feed \u00b6 On this screen all the Ilias entries from the current feed and cached can be found. You can search them, read them, save them for later. Saved \u00b6 On this screen all the saved Ilias entries can be found. You can search them, read them. Note Coming soon Links \u00b6 On this screen you can save links with a comment and name to easily get to specific pages. You can search them, read them. Note Coming soon Popup screens \u00b6 Settings \u00b6 On this screen you can configure custom settings. Info \u00b6 On this screen you can find the dependencies, the version and author. Also there is a button to check for a newer version. Search bars \u00b6 The search bars in this project are custom written which is why they support the following features: You can add keywords to further specify what you want: bears red bears cool red bears You can search for short sentences to further specify what you want: red bears \"his name was unbearable funny\" \"bees hate him\" cool bears You can even search directly any metadata to further specify what you want: name:\"native title bar\" (on the settings screen) description:feed title:\"cron job\" (on the settings screen) Note The search bars are currently implemented to ignore any case. This means if you search in any case it will make no difference in the results. Hint To find the name of the metadata that describes certain text content in each list element look into the code for const variable = new SearchManager(...) . Todo When the search bar is not a prototype any more add here a metadata table that lists all available keys for initialized search bars. Keyboard shortcuts \u00b6 Global keyboard shortcut \u00b6 By pressing Ctrl + Alt + I the app will if it runs in the background be shown and focused or if it runs in the foreground be hidden. This shortcut is configurable. Focus search bar keyboard shortcut \u00b6 On pages that contain a search bar you can directly focus the bar by pressing Ctrl + F .","title":"Instructions"},{"location":"instructions/#instructions","text":"TODO Memo Add later","title":"Instructions"},{"location":"instructions/#main-screens","text":"","title":"Main screens"},{"location":"instructions/#feed","text":"On this screen all the Ilias entries from the current feed and cached can be found. You can search them, read them, save them for later.","title":"Feed"},{"location":"instructions/#saved","text":"On this screen all the saved Ilias entries can be found. You can search them, read them. Note Coming soon","title":"Saved"},{"location":"instructions/#links","text":"On this screen you can save links with a comment and name to easily get to specific pages. You can search them, read them. Note Coming soon","title":"Links"},{"location":"instructions/#popup-screens","text":"","title":"Popup screens"},{"location":"instructions/#settings","text":"On this screen you can configure custom settings.","title":"Settings"},{"location":"instructions/#info","text":"On this screen you can find the dependencies, the version and author. Also there is a button to check for a newer version.","title":"Info"},{"location":"instructions/#search-bars","text":"The search bars in this project are custom written which is why they support the following features: You can add keywords to further specify what you want: bears red bears cool red bears You can search for short sentences to further specify what you want: red bears \"his name was unbearable funny\" \"bees hate him\" cool bears You can even search directly any metadata to further specify what you want: name:\"native title bar\" (on the settings screen) description:feed title:\"cron job\" (on the settings screen) Note The search bars are currently implemented to ignore any case. This means if you search in any case it will make no difference in the results. Hint To find the name of the metadata that describes certain text content in each list element look into the code for const variable = new SearchManager(...) . Todo When the search bar is not a prototype any more add here a metadata table that lists all available keys for initialized search bars.","title":"Search bars"},{"location":"instructions/#keyboard-shortcuts","text":"","title":"Keyboard shortcuts"},{"location":"instructions/#global-keyboard-shortcut","text":"By pressing Ctrl + Alt + I the app will if it runs in the background be shown and focused or if it runs in the foreground be hidden. This shortcut is configurable.","title":"Global keyboard shortcut"},{"location":"instructions/#focus-search-bar-keyboard-shortcut","text":"On pages that contain a search bar you can directly focus the bar by pressing Ctrl + F .","title":"Focus search bar keyboard shortcut"},{"location":"other-git-hooks/","text":"Git hooks \u00b6 Git hooks help you to automate things to have less work by executing custom scripts at certain Git events. Create a hook \u00b6 Git hooks are located in the directory .git/hooks of any Git repository. From the start there are some sample scripts that you can check out. Modify the commit message \u00b6 Create in this directory the file prepare-commit-msg with the follwoing content: #!/bin/sh # Get commit info COMMIT_MSG_FILE = $1 # Create a text that will be pushed to the commit message file PREPARE_COMMIT_MSG = \"# Summarize changes in around 50 characters or less # More detailed explanatory text, if necessary. # Wrap it to about 72 characters or so. # A blank line to the summary is necessary to get a paragraph! # # More info if needed (again, don't forget one blank line!) # - Lists/Bullet points are okay, leave a line between each bullet # point and one above the list # # For issue trackers, put references to them at the bottom, like: # (don't forget one blank line!) # Resolves: #123 # See also: #456, #789 # # More info at: https://chris.beams.io/posts/git-commit/\" # Every line that begin with \"#\" will be forgotten when committed echo \" $PREPARE_COMMIT_MSG \" > $1 (If you are on Linux run chmod +x prepare-commit-msg to make the file executable) If you now try to make a commit ( git commit or git commit -S ) this will come always up and your input will result in the commit message. Bug If you would run git commit -m \"test\" The commit message results in the commented text! This needs to be fixed before it can be used without pain! (Safety-)Checks before a commit \u00b6 With the Git hook file pre-commit you can make safety checks before the commit is made. The pre-commit script is executed every time you run git commit before Git asks the developer for a commit message or generates a commit object. This is really useful when you do not to push code that fails a test for example. The only thing you need to do is exit the script with exit 0 if all tests resulted in no failures else return exit 1 and the commit will not be made. #!/bin/sh # Run tests npm run test # If no error (test ran successful) exit with 0 and go on with commit process exit 0 Hint This example is used by the maintainer of this repository to only let commits through that at least pass all tests. Update documentation after any post \u00b6 You can use the Git hook file post-commit to execute a custom script after a commit is made. A useful example could be to update to documentation: #!/bin/sh # Create documentation npm run docs # Move documentation to custom place (documentation repository) rm -r ../IliasBuddyDesktopDocs/* cp -r ./docs/site/* ../IliasBuddyDesktopDocs/ # Ask if the current progress should be pushed read -p \"Do you want to push the current progress \" -n 1 -r if [[ $REPLY = ~ ^ [ Yy ] $ ]] then # Commit and push the current progress git push else # Else exit exit 0 fi # If user pushed current progress commit/push updated documentation cd ../IliasBuddyDesktopDocs/ git add . # Ask if everything should be pushed read -p \"Do you want to push the documentation \" -n 1 -r if [[ $REPLY = ~ ^ [ Yy ] $ ]] then # Commit and push current documentation git commit -S -m \"Updated to latest master\" git push fi Bug This example is not working on Windows computers because read can't be found. A port of the GNU utility read for Windows is needed (I couldn't find any port myself). Hint This example is used by the maintainer of this repository to automatically update the documentation. Do not forget that you need to git push the initial commit. The documentation is only pushed because there is sadly no post-push hook in Git.","title":"Git hooks"},{"location":"other-git-hooks/#git-hooks","text":"Git hooks help you to automate things to have less work by executing custom scripts at certain Git events.","title":"Git hooks"},{"location":"other-git-hooks/#create-a-hook","text":"Git hooks are located in the directory .git/hooks of any Git repository. From the start there are some sample scripts that you can check out.","title":"Create a hook"},{"location":"other-git-hooks/#modify-the-commit-message","text":"Create in this directory the file prepare-commit-msg with the follwoing content: #!/bin/sh # Get commit info COMMIT_MSG_FILE = $1 # Create a text that will be pushed to the commit message file PREPARE_COMMIT_MSG = \"# Summarize changes in around 50 characters or less # More detailed explanatory text, if necessary. # Wrap it to about 72 characters or so. # A blank line to the summary is necessary to get a paragraph! # # More info if needed (again, don't forget one blank line!) # - Lists/Bullet points are okay, leave a line between each bullet # point and one above the list # # For issue trackers, put references to them at the bottom, like: # (don't forget one blank line!) # Resolves: #123 # See also: #456, #789 # # More info at: https://chris.beams.io/posts/git-commit/\" # Every line that begin with \"#\" will be forgotten when committed echo \" $PREPARE_COMMIT_MSG \" > $1 (If you are on Linux run chmod +x prepare-commit-msg to make the file executable) If you now try to make a commit ( git commit or git commit -S ) this will come always up and your input will result in the commit message. Bug If you would run git commit -m \"test\" The commit message results in the commented text! This needs to be fixed before it can be used without pain!","title":"Modify the commit message"},{"location":"other-git-hooks/#safety-checks-before-a-commit","text":"With the Git hook file pre-commit you can make safety checks before the commit is made. The pre-commit script is executed every time you run git commit before Git asks the developer for a commit message or generates a commit object. This is really useful when you do not to push code that fails a test for example. The only thing you need to do is exit the script with exit 0 if all tests resulted in no failures else return exit 1 and the commit will not be made. #!/bin/sh # Run tests npm run test # If no error (test ran successful) exit with 0 and go on with commit process exit 0 Hint This example is used by the maintainer of this repository to only let commits through that at least pass all tests.","title":"(Safety-)Checks before a commit"},{"location":"other-git-hooks/#update-documentation-after-any-post","text":"You can use the Git hook file post-commit to execute a custom script after a commit is made. A useful example could be to update to documentation: #!/bin/sh # Create documentation npm run docs # Move documentation to custom place (documentation repository) rm -r ../IliasBuddyDesktopDocs/* cp -r ./docs/site/* ../IliasBuddyDesktopDocs/ # Ask if the current progress should be pushed read -p \"Do you want to push the current progress \" -n 1 -r if [[ $REPLY = ~ ^ [ Yy ] $ ]] then # Commit and push the current progress git push else # Else exit exit 0 fi # If user pushed current progress commit/push updated documentation cd ../IliasBuddyDesktopDocs/ git add . # Ask if everything should be pushed read -p \"Do you want to push the documentation \" -n 1 -r if [[ $REPLY = ~ ^ [ Yy ] $ ]] then # Commit and push current documentation git commit -S -m \"Updated to latest master\" git push fi Bug This example is not working on Windows computers because read can't be found. A port of the GNU utility read for Windows is needed (I couldn't find any port myself). Hint This example is used by the maintainer of this repository to automatically update the documentation. Do not forget that you need to git push the initial commit. The documentation is only pushed because there is sadly no post-push hook in Git.","title":"Update documentation after any post"},{"location":"other-python-virtualenv/","text":"Python virtualenv \u00b6 To not install python packages in the global namespace of you cmputer you can use something called virtualenv . This makes it possible to install packages and use python as if the packages are system wide installed but they are just installed in a local directory. Ready to be used or deleted at any time without destroying other projects that use the same program but different version, etc. Set up an virtual environment \u00b6 # Install/Upgrade virtualenv on your computer (globally!) pip install virtualenv -U # Create a new virtual environment in the current directory virtualenv env Now a new directory was created ( env ) that contains everything. Hint Don't forget to ignore the directory when you work with git or something similar, because it contains nothing custom! Just by repeating the setup and pip install -r requirements.txt the user creates the same environment as you. Activate the virtual environment \u00b6 To activate the created virtual environment run: # Windows: ./env/Scripts/activate # MacOS/Linux source env/bin/activate Now the terminal is in the virtual environment Installing packages in the virtual environment \u00b6 You can do anything as before but if the virtual environment was activated the packages will now be installed only in this directory, not globally. # Install a package to the activated virtual environment pip install packageName -U Save all installed packages for a quick setup \u00b6 To set up a new virtual environment on another computer you can save all locally installed packages with version in a file: pip freeze > requirements.txt To install all the packages on another system run there after setting up the virtual environment and activating it: pip install -r requirements.txt Leave/Deactivate the virtual environment \u00b6 To leave the virtual environment again just enter deactivate Uninstall packages \u00b6 To uninstall python packages just run: pip uninstall packageName","title":"Python virtualenv"},{"location":"other-python-virtualenv/#python-virtualenv","text":"To not install python packages in the global namespace of you cmputer you can use something called virtualenv . This makes it possible to install packages and use python as if the packages are system wide installed but they are just installed in a local directory. Ready to be used or deleted at any time without destroying other projects that use the same program but different version, etc.","title":"Python virtualenv"},{"location":"other-python-virtualenv/#set-up-an-virtual-environment","text":"# Install/Upgrade virtualenv on your computer (globally!) pip install virtualenv -U # Create a new virtual environment in the current directory virtualenv env Now a new directory was created ( env ) that contains everything. Hint Don't forget to ignore the directory when you work with git or something similar, because it contains nothing custom! Just by repeating the setup and pip install -r requirements.txt the user creates the same environment as you.","title":"Set up an virtual environment"},{"location":"other-python-virtualenv/#activate-the-virtual-environment","text":"To activate the created virtual environment run: # Windows: ./env/Scripts/activate # MacOS/Linux source env/bin/activate Now the terminal is in the virtual environment","title":"Activate the virtual environment"},{"location":"other-python-virtualenv/#installing-packages-in-the-virtual-environment","text":"You can do anything as before but if the virtual environment was activated the packages will now be installed only in this directory, not globally. # Install a package to the activated virtual environment pip install packageName -U","title":"Installing packages in the virtual environment"},{"location":"other-python-virtualenv/#save-all-installed-packages-for-a-quick-setup","text":"To set up a new virtual environment on another computer you can save all locally installed packages with version in a file: pip freeze > requirements.txt To install all the packages on another system run there after setting up the virtual environment and activating it: pip install -r requirements.txt","title":"Save all installed packages for a quick setup"},{"location":"other-python-virtualenv/#leavedeactivate-the-virtual-environment","text":"To leave the virtual environment again just enter deactivate","title":"Leave/Deactivate the virtual environment"},{"location":"other-python-virtualenv/#uninstall-packages","text":"To uninstall python packages just run: pip uninstall packageName","title":"Uninstall packages"},{"location":"other-set-env-variables/","text":"Set environmental variables \u00b6 Powershell (Windows) \u00b6 Set variables \u00b6 Temporary \u00b6 $env:TEMPORARY_VAR = \"A temporary test variable\" echo $env:TEMPORARY_VAR Forever (run terminal with admin rights) \u00b6 # Set environmental variables [Environment] :: SetEnvironmentVariable ( \"FOREVER_VAR_MACHINE\" , \"A machine test variable\" , \"Machine\" ) [Environment] :: SetEnvironmentVariable ( \"FOREVER_VAR_USER\" , \"A user test variable\" , \"User\" ) # Update them in the current terminal $env:FOREVER_VAR_MACHINE = [System.Environment] :: GetEnvironmentVariable ( \"FOREVER_VAR_MACHINE\" , \"Machine\" ) $env:FOREVER_VAR_USER = [System.Environment] :: GetEnvironmentVariable ( \"FOREVER_VAR_USER\" , \"User\" ) # Echo them to the console echo $env:FOREVER_VAR_MACHINE echo $env:FOREVER_VAR_USER Remove variables \u00b6 # Set environmental variables [Environment] :: SetEnvironmentVariable ( \"TEST_VAR_MACHINE\" , \"A machine test variable\" , \"Machine\" ) # Update it in the current terminal $env:TEST_VAR_MACHINE = [System.Environment] :: GetEnvironmentVariable ( \"TEST_VAR_MACHINE\" , \"Machine\" ) # Echo them to the console echo $env:TEST_VAR_MACHINE # Remove variable [Environment] :: SetEnvironmentVariable ( \"TEST_VAR_MACHINE\" , $null , \"Machine\" ) # Update it in the current terminal $env:TEST_VAR_MACHINE = [System.Environment] :: GetEnvironmentVariable ( \"TEST_VAR_MACHINE\" , \"Machine\" ) # Echo them to the console (Should be empty because the variable doesn't exist any more) echo $env:TEST_VAR_MACHINE Update variables without restarting the terminal \u00b6 Update path variable: $env:Path = [System.Environment] :: GetEnvironmentVariable ( \"Path\" , \"Machine\" ) + \";\" + [System.Environment] :: GetEnvironmentVariable ( \"Path\" , \"User\" ) Update another variable you set in machine variables named MACHINE_VARIABLE : $env:MACHINE_VARIABLE = [System.Environment] :: GetEnvironmentVariable ( \"MACHINE_VARIABLE\" , \"Machine\" ) Update another variable you set in user variables named USER_VARIABLE : $env:USER_VARIABLE = [System.Environment] :: GetEnvironmentVariable ( \"USER_VARIABLE\" , \"User\" )","title":"Set env variables"},{"location":"other-set-env-variables/#set-environmental-variables","text":"","title":"Set environmental variables"},{"location":"other-set-env-variables/#powershell-windows","text":"","title":"Powershell (Windows)"},{"location":"other-set-env-variables/#set-variables","text":"","title":"Set variables"},{"location":"other-set-env-variables/#temporary","text":"$env:TEMPORARY_VAR = \"A temporary test variable\" echo $env:TEMPORARY_VAR","title":"Temporary"},{"location":"other-set-env-variables/#forever-run-terminal-with-admin-rights","text":"# Set environmental variables [Environment] :: SetEnvironmentVariable ( \"FOREVER_VAR_MACHINE\" , \"A machine test variable\" , \"Machine\" ) [Environment] :: SetEnvironmentVariable ( \"FOREVER_VAR_USER\" , \"A user test variable\" , \"User\" ) # Update them in the current terminal $env:FOREVER_VAR_MACHINE = [System.Environment] :: GetEnvironmentVariable ( \"FOREVER_VAR_MACHINE\" , \"Machine\" ) $env:FOREVER_VAR_USER = [System.Environment] :: GetEnvironmentVariable ( \"FOREVER_VAR_USER\" , \"User\" ) # Echo them to the console echo $env:FOREVER_VAR_MACHINE echo $env:FOREVER_VAR_USER","title":"Forever (run terminal with admin rights)"},{"location":"other-set-env-variables/#remove-variables","text":"# Set environmental variables [Environment] :: SetEnvironmentVariable ( \"TEST_VAR_MACHINE\" , \"A machine test variable\" , \"Machine\" ) # Update it in the current terminal $env:TEST_VAR_MACHINE = [System.Environment] :: GetEnvironmentVariable ( \"TEST_VAR_MACHINE\" , \"Machine\" ) # Echo them to the console echo $env:TEST_VAR_MACHINE # Remove variable [Environment] :: SetEnvironmentVariable ( \"TEST_VAR_MACHINE\" , $null , \"Machine\" ) # Update it in the current terminal $env:TEST_VAR_MACHINE = [System.Environment] :: GetEnvironmentVariable ( \"TEST_VAR_MACHINE\" , \"Machine\" ) # Echo them to the console (Should be empty because the variable doesn't exist any more) echo $env:TEST_VAR_MACHINE","title":"Remove variables"},{"location":"other-set-env-variables/#update-variables-without-restarting-the-terminal","text":"Update path variable: $env:Path = [System.Environment] :: GetEnvironmentVariable ( \"Path\" , \"Machine\" ) + \";\" + [System.Environment] :: GetEnvironmentVariable ( \"Path\" , \"User\" ) Update another variable you set in machine variables named MACHINE_VARIABLE : $env:MACHINE_VARIABLE = [System.Environment] :: GetEnvironmentVariable ( \"MACHINE_VARIABLE\" , \"Machine\" ) Update another variable you set in user variables named USER_VARIABLE : $env:USER_VARIABLE = [System.Environment] :: GetEnvironmentVariable ( \"USER_VARIABLE\" , \"User\" )","title":"Update variables without restarting the terminal"},{"location":"other-what-is-this-source-code/","text":"What is this source code \u00b6 cloc \u00b6 Install it via npm install cloc or via GitHub releases Run cloc --vcs=git to see all the files and lines of code that are tracked via this git repository Or check especially for a programming language with cloc --vcs=git --include-lang=JavaScript (For other languages replace JavaScript or if you want to view more than one add them with a comma like cloc --vcs=git --include-lang=JavaScript,TypeScript ) ( Example preview from 20.12.2018 ) $ cloc --vcs = git ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- JavaScript 16 147 564 1297 CSS 6 67 52 357 JSON 2 0 0 286 TypeScript 10 21 0 279 HTML 1 4 5 78 Handlebars 14 4 0 71 Bourne Shell 8 17 14 53 Markdown 3 27 0 48 ------------------------------------------------------------------------------- SUM: 60 287 635 2469 ------------------------------------------------------------------------------- ( Example preview from 31.12.2018 ) $ cloc --vcs = git ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- JavaScript 19 216 1121 2034 JSON 6 0 0 497 CSS 6 73 55 384 TypeScript 9 47 701 341 Markdown 14 114 0 241 Bourne Shell 14 48 32 128 HTML 1 4 13 126 Handlebars 17 5 3 90 YAML 1 4 3 36 PowerShell 1 1 3 4 ------------------------------------------------------------------------------- SUM: 88 512 1931 3881 ------------------------------------------------------------------------------- Get the most used lines \u00b6 If you want to see what the most used constructs/calls are use the following command: ( Example preview from 20.12.2018 ) $ find -iname '*.js' -not -path \"./node_modules/*\" -not -path \"./dist/*\" | xargs cat | sort | uniq -c | sort -nr | head -n 5 146 80 } 56 /** 56 */ 41 } ( Example preview from 31.12.2018 ) $ find -iname '*.js' -not -path \"./node_modules/*\" -not -path \"./dist/*\" | xargs cat | sort | uniq -c | sort -nr | head -n 5 216 109 } 82 /** 82 */ 77 */ Because the first some lines are always not that necessary (Whitespaces, parentheses, brackets, ...) just play around and probably add a tail to start off from the nth line: ( Example preview from 20.12.2018 ) $ find -iname '*.js' -not -path \"./node_modules/*\" -not -path \"./dist/*\" | xargs cat | sort | uniq -c | sort -nr | head -n 21 | tail -n +14 10 const path = require ( 'path' ) 10 * @returns { string } 8 */ 7 }) 7 break 7 }) 6 }) 6 const fs = require ( 'fs' )","title":"What is this source code"},{"location":"other-what-is-this-source-code/#what-is-this-source-code","text":"","title":"What is this source code"},{"location":"other-what-is-this-source-code/#cloc","text":"Install it via npm install cloc or via GitHub releases Run cloc --vcs=git to see all the files and lines of code that are tracked via this git repository Or check especially for a programming language with cloc --vcs=git --include-lang=JavaScript (For other languages replace JavaScript or if you want to view more than one add them with a comma like cloc --vcs=git --include-lang=JavaScript,TypeScript ) ( Example preview from 20.12.2018 ) $ cloc --vcs = git ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- JavaScript 16 147 564 1297 CSS 6 67 52 357 JSON 2 0 0 286 TypeScript 10 21 0 279 HTML 1 4 5 78 Handlebars 14 4 0 71 Bourne Shell 8 17 14 53 Markdown 3 27 0 48 ------------------------------------------------------------------------------- SUM: 60 287 635 2469 ------------------------------------------------------------------------------- ( Example preview from 31.12.2018 ) $ cloc --vcs = git ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- JavaScript 19 216 1121 2034 JSON 6 0 0 497 CSS 6 73 55 384 TypeScript 9 47 701 341 Markdown 14 114 0 241 Bourne Shell 14 48 32 128 HTML 1 4 13 126 Handlebars 17 5 3 90 YAML 1 4 3 36 PowerShell 1 1 3 4 ------------------------------------------------------------------------------- SUM: 88 512 1931 3881 -------------------------------------------------------------------------------","title":"cloc"},{"location":"other-what-is-this-source-code/#get-the-most-used-lines","text":"If you want to see what the most used constructs/calls are use the following command: ( Example preview from 20.12.2018 ) $ find -iname '*.js' -not -path \"./node_modules/*\" -not -path \"./dist/*\" | xargs cat | sort | uniq -c | sort -nr | head -n 5 146 80 } 56 /** 56 */ 41 } ( Example preview from 31.12.2018 ) $ find -iname '*.js' -not -path \"./node_modules/*\" -not -path \"./dist/*\" | xargs cat | sort | uniq -c | sort -nr | head -n 5 216 109 } 82 /** 82 */ 77 */ Because the first some lines are always not that necessary (Whitespaces, parentheses, brackets, ...) just play around and probably add a tail to start off from the nth line: ( Example preview from 20.12.2018 ) $ find -iname '*.js' -not -path \"./node_modules/*\" -not -path \"./dist/*\" | xargs cat | sort | uniq -c | sort -nr | head -n 21 | tail -n +14 10 const path = require ( 'path' ) 10 * @returns { string } 8 */ 7 }) 7 break 7 }) 6 }) 6 const fs = require ( 'fs' )","title":"Get the most used lines"}]}